{"_type": "InitEvent", "activity_workers": [], "apps": [{"_type": "Application", "active": false, "blocked_lines": [], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 0}], "server": {"_type": "Server", "id": 1, "shards": [{"default": {}}], "time": 0}, "workflow_workers": [{"_type": "WorkflowWorker", "id": 1, "time": 0, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}]}
{"_type": "StateChangeEvent", "entity": {"_type": "WorkflowWorker", "id": 1, "time": 1, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}}
{"_type": "MessageEvent", "message": {"_type": "WorkerPollRequest", "id": 1, "response_payload": null, "stage": {"_type": "RequestResponseStage", "name": "Request", "value": 1}, "task": {"_type": "WorkflowTask", "events": [], "requested_updates": [], "workflow_id": ""}, "time": 1, "token": 0}, "receiver": {"_type": "Server", "id": 1, "shards": [{"default": {}}], "time": 0}, "sender": {"_type": "WorkflowWorker", "id": 1, "time": 1, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {}}], "time": 2}}
{"_type": "StateChangeEvent", "entity": {"_type": "Application", "active": true, "blocked_lines": [], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 0}}
{"_type": "StateChangeEvent", "entity": {"_type": "Application", "active": true, "blocked_lines": [1], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 0}}
{"_type": "StateChangeEvent", "entity": {"_type": "Application", "active": true, "blocked_lines": [1], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 1}}
{"_type": "MessageEvent", "message": {"_type": "ApplicationRequest", "id": 1, "request_type": {"_type": "ApplicationRequestType", "name": "StartWorkflow", "value": 1}, "response_payload": null, "stage": {"_type": "RequestResponseStage", "name": "Request", "value": 1}, "time": 1, "token": 1}, "receiver": {"_type": "Server", "id": 1, "shards": [{"default": {}}], "time": 2}, "sender": {"_type": "Application", "active": true, "blocked_lines": [1], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 1}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {}}], "time": 3}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": false, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 3}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": false, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": false, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 3}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 3}}
{"_type": "StateChangeEvent", "entity": {"_type": "Application", "active": true, "blocked_lines": [], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 1}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 4}}
{"_type": "MessageEvent", "message": {"_type": "ApplicationRequest", "id": 1, "request_type": {"_type": "ApplicationRequestType", "name": "StartWorkflow", "value": 1}, "response_payload": null, "stage": {"_type": "RequestResponseStage", "name": "Response", "value": 2}, "time": 4, "token": 1}, "receiver": {"_type": "Application", "active": true, "blocked_lines": [], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 1}, "sender": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 4}}
{"_type": "StateChangeEvent", "entity": {"_type": "Application", "active": true, "blocked_lines": [], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 5}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 5}}
{"_type": "MessageEvent", "message": {"_type": "WorkerPollRequest", "id": 1, "response_payload": null, "stage": {"_type": "RequestResponseStage", "name": "Response", "value": 2}, "task": {"_type": "WorkflowTask", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "requested_updates": [], "workflow_id": "my-workflow-id"}, "time": 5, "token": 0}, "receiver": {"_type": "WorkflowWorker", "id": 1, "time": 1, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}, "sender": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 5}}
{"_type": "StateChangeEvent", "entity": {"_type": "WorkflowWorker", "id": 1, "time": 6, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}}
{"_type": "StateChangeEvent", "entity": {"_type": "Workflow", "active": true, "blocked_lines": [], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}}
{"_type": "StateChangeEvent", "entity": {"_type": "Workflow", "active": false, "blocked_lines": [2], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}}
{"_type": "StateChangeEvent", "entity": {"_type": "WorkflowWorker", "id": 1, "time": 6, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [2], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}}
{"_type": "StateChangeEvent", "entity": {"_type": "WorkflowWorker", "id": 1, "time": 7, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [2], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}}
{"_type": "MessageEvent", "message": {"_type": "WorkflowTaskCompleted", "id": 1, "response_payload": null, "stage": {"_type": "RequestResponseStage", "name": "Response", "value": 2}, "time": 7, "token": null}, "receiver": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 5}, "sender": {"_type": "WorkflowWorker", "id": 1, "time": 7, "workflows": [{"_type": "Workflow", "active": false, "blocked_lines": [2], "code": "func MyWorkflow(ctx workflow.Context) error {\n    return 1\n}", "id": 1, "language": "go", "time": 0}]}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 8}}
{"_type": "StateChangeEvent", "entity": {"_type": "Server", "id": 1, "shards": [{"default": {"my-workflow-id": {"_type": "WorkflowData", "history": {"_type": "History", "events": [{"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WF_STARTED", "value": 1}, "id": 1, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_SCHEDULED", "value": 5}, "id": 2, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_STARTED", "value": 6}, "id": 3, "seen_by_worker": true, "time": 0}, {"_type": "HistoryEvent", "data": {}, "event_type": {"_type": "HistoryEventType", "name": "WFT_COMPLETED", "value": 7}, "id": 4, "seen_by_worker": true, "time": 0}], "id": 1, "time": 0, "workflow_id": "my-workflow-id"}, "update_registry": []}}}], "time": 8}}
{"_type": "StateChangeEvent", "entity": {"_type": "Application", "active": false, "blocked_lines": [], "code": "const wfHandle = await client.start(myWorkflow, {\n    workflowId: 'my-workflow-id',\n    taskQueue: 'my-task-queue',\n});", "id": 1, "language": "typescript", "time": 5}}
